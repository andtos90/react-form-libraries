{"version":3,"sources":["logo.svg","FormField.js","FormikForm.js","FinalForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FormField","field","errorMessage","style","display","flexDirection","maxWidth","validate","values","errors","Object","entries","key","value","keySplit","split","FormikForm","initialValues","onSubmit","actions","setTimeout","alert","JSON","stringify","setSubmitting","touched","flexWrap","Array","from","keys","map","i","name","FinalForm","subscription","submitting","pristine","render","handleSubmit","input","meta","error","Home","App","className","to","path","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","unregister","navigator","serviceWorker","ready","then","registration"],"mappings":"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","file":"static/js/main.71c9c248.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst FormField = ({ field, errorMessage }) => (\n  <div style={{ display: 'flex', flexDirection: 'column', maxWidth: '200px' }}>\n    <textarea {...field}></textarea>\n    <p>{errorMessage}</p>\n  </div>\n);\n\nexport default FormField;\n","import React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nimport FormField from './FormField';\n\nconst NUMBER_OF_FIELDS = 1000;\n\nconst validate = values => {\n  const errors = {};\n  for (const [key, value] of Object.entries(values)) {\n    const keySplit = key.split('-');\n    if (keySplit[1] !== value) errors[key] = `Value should be ${keySplit[1]}`;\n  }\n  return errors;\n};\n\nconst FormikForm = () => (\n  <>\n    <h1>Formik Form</h1>\n    <Formik\n      initialValues={{}}\n      validate={validate}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n    >\n      {({ errors, touched }) => (\n        <Form\n          style={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}\n        >\n          {Array.from(Array(NUMBER_OF_FIELDS).keys()).map(i => (\n            <Field key={`text-${i}`} name={`text-${i}`}>\n              {({ field }) => (\n                <FormField\n                  field={field}\n                  errorMessage={\n                    errors[`text-${i}`] &&\n                    touched[`text-${i}`] &&\n                    errors[`text-${i}`]\n                  }\n                />\n              )}\n            </Field>\n          ))}\n        </Form>\n      )}\n    </Formik>\n  </>\n);\n\nexport default FormikForm;\n","import React from 'react';\nimport { Form, Field } from 'react-final-form';\nimport FormField from './FormField';\n\nconst NUMBER_OF_FIELDS = 1000;\n\nconst validate = values => {\n  const errors = {};\n  for (const [key, value] of Object.entries(values)) {\n    const keySplit = key.split('-');\n    if (keySplit[1] !== value) errors[key] = `Value should be ${keySplit[1]}`;\n  }\n  return errors;\n};\n\nconst FinalForm = () => {\n  return (\n    <>\n      <h1>Final Form</h1>\n      <Form\n        subscription={{ submitting: true, pristine: true }}\n        onSubmit={(values, actions) => {\n          setTimeout(() => {\n            alert(JSON.stringify(values, null, 2));\n            actions.setSubmitting(false);\n          }, 1000);\n        }}\n        validate={validate}\n        render={({ handleSubmit }) => (\n          <form\n            onSubmit={handleSubmit}\n            style={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}\n          >\n            {Array.from(Array(NUMBER_OF_FIELDS).keys()).map(i => (\n              <Field name={`text-${i}`}>\n                {({ input, meta }) => (\n                  <FormField\n                    field={input}\n                    errorMessage={meta.error && meta.touched && meta.error}\n                  />\n                )}\n              </Field>\n            ))}\n          </form>\n        )}\n      />\n    </>\n  );\n};\n\nexport default FinalForm;\n","import React from 'react';\nimport { Link, Router } from '@reach/router';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport FormikForm from './FormikForm';\nimport FinalForm from './FinalForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav className=\"App-header\">\n        <Link className=\"App-link\" to=\"/\">\n          Home\n        </Link>\n        <Link className=\"App-link\" to=\"formik\">\n          Formik\n        </Link>\n        <Link className=\"App-link\" to=\"final-form\">\n          Final Form\n        </Link>\n      </nav>\n      <Router>\n        <Home path=\"/\" />\n        <FormikForm path=\"/formik\" />\n        <FinalForm path=\"/final-form\" />\n      </Router>\n    </div>\n  );\n}\n\nconst Home = () => (\n  <>\n    <p>\n      I was going to say something extremely rough to Lorem Ipsum, to its\n      family, and I said to myself, \"I can't do it. I just can't do it. It's\n      inappropriate. It's not nice.\" Lorem Ipsum is unattractive, both inside\n      and out. I fully understand why it’s former users left it for something\n      else. They made a good decision. It’s about making placeholder text great\n      again.\n    </p>\n\n    <p>\n      That’s what people want, they want placeholder text to be great again. The\n      best taco bowls are made in Trump Tower Grill. I love Hispanics! Lorem\n      Ipsum's father was with Lee Harvey Oswald prior to Oswald's being, you\n      know, shot. Trump Ipsum is calling for a total and complete shutdown of\n      Muslim text entering your website.{' '}\n    </p>\n\n    <p>\n      I was going to say something extremely rough to Lorem Ipsum, to its\n      family, and I said to myself, \"I can't do it. I just can't do it. It's\n      inappropriate. It's not nice.\" An 'extremely credible source' has called\n      my office and told me that Lorem Ipsum's birth certificate is a fraud.\n      It’s about making placeholder text great again. That’s what people want,\n      they want placeholder text to be great again. It’s about making\n      placeholder text great again. That’s what people want, they want\n      placeholder text to be great again. Despite the constant negative ipsum\n      covfefe. I was going to say something extremely rough to Lorem Ipsum, to\n      its family, and I said to myself, \"I can't do it. I just can't do it. It's\n      inappropriate. It's not nice.\"\n    </p>\n\n    <p>\n      Lorem Ipsum best not make any more threats toyour website. It will be met\n      with fire and fury like the world has never seen. I will write some great\n      placeholder text – and nobody writes better placeholder text than me,\n      believe me – and I’ll write it very inexpensively. I will write some\n      great, great text on your website’s Southern border, and I will make\n      Google pay for that text. Mark my words. You’re disgusting. I think the\n      only card she has is the Lorem card.\n    </p>\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}